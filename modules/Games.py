from telethon import events
import random
import asyncio
from datetime import datetime

def register(client):
    @client.on(events.NewMessage(pattern=r"-–∏–≥—Ä–∞ —É–≥–∞–¥–∞–π—á–∏—Å–ª–æ"))
    async def number_guess(event):
        number = random.randint(1, 100)
        attempts = 0
        max_attempts = 7
        await event.reply("–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100! –£ —Ç–µ–±—è 7 –ø–æ–ø—ã—Ç–æ–∫.")

        def check_guess(m):
            return m.sender_id == event.sender_id and m.text.isdigit()

        while attempts < max_attempts:
            try:
                guess_msg = await client.wait_for_event(events.NewMessage(from_users=event.sender_id, func=check_guess), timeout=30)
                guess = int(guess_msg.text)
                attempts += 1
                if guess == number:
                    await event.reply(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª –∑–∞ {attempts} –ø–æ–ø—ã—Ç–æ–∫!")
                    return
                elif guess < number:
                    await event.reply("–°–ª–∏—à–∫–æ–º –º–∞–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ.")
                else:
                    event.reply("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ.")
            except asyncio.TimeoutError:
                await event.reply("–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
                return
        await event.reply(f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ß–∏—Å–ª–æ –±—ã–ª–æ {number}.")

    @client.on(events.NewMessage(pattern=r"-–∏–≥—Ä–∞ –∫–Ω–± (–∫–∞–º–µ–Ω—å|–Ω–æ–∂–Ω–∏—Ü—ã|–±—É–º–∞–≥–∞)"))
    async def rock_paper_scissors(event):
        user_choice = event.pattern_match.group(1).lower()
        choices = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]
        bot_choice = random.choice(choices)
        result = ""
        if user_choice == bot_choice:
            result = "–ù–∏—á—å—è!"
        elif (user_choice == "–∫–∞–º–µ–Ω—å" and bot_choice == "–Ω–æ–∂–Ω–∏—Ü—ã") or \
             (user_choice == "–±—É–º–∞–≥–∞" and bot_choice == "–∫–∞–º–µ–Ω—å") or \
             (user_choice == "–Ω–æ–∂–Ω–∏—Ü—ã" and bot_choice == "–±—É–º–∞–≥–∞"):
            result = "–¢—ã –≤—ã–∏–≥—Ä–∞–ª!"
        else:
            result = "–Ø –≤—ã–∏–≥—Ä–∞–ª!"
        await event.reply(f"–¢—ã –≤—ã–±—Ä–∞–ª **{user_choice}**, —è –≤—ã–±—Ä–∞–ª **{bot_choice}**. {result}")

    @client.on(events.NewMessage(pattern=r"-–∏–≥—Ä–∞ –º–æ–Ω–µ—Ç–∫–∞ (–æ—Ä–µ–ª|—Ä–µ—à–∫–∞)"))
    async def coin_flip(event):
        user_choice = event.pattern_match.group(1).lower()
        result = random.choice(["–æ—Ä–µ–ª", "—Ä–µ—à–∫–∞"])
        if user_choice == result:
            await event.reply(f"–í—ã–ø–∞–ª–æ **{result}**! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!")
        else:
            await event.reply(f"–í—ã–ø–∞–ª–æ **{result}**! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!")

    @client.on(events.NewMessage(pattern=r"-–∏–≥—Ä–∞ –∫—É–±–∏–∫"))
    async def dice_roll(event):
        roll = random.randint(1, 6)
        await event.reply(f"–¢—ã –≤—ã–±—Ä–æ—Å–∏–ª **{roll}**! üé≤")

    @client.on(events.NewMessage(pattern=r"-–∏–≥—Ä–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞"))
    async def trivia(event):
        questions = [
            {"q": "–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –§—Ä–∞–Ω—Ü–∏–∏?", "a": "–ø–∞—Ä–∏–∂"},
            {"q": "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞–∫ –ö—Ä–∞—Å–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞?", "a": "–º–∞—Ä—Å"},
            {"q": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?", "a": "4"}
        ]
        q = random.choice(questions)
        await event.reply(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞: {q['q']}\n–û—Ç–≤–µ—Ç—å!")

        def check_answer(m):
            return m.sender_id == event.sender_id

        try:
            answer_msg = await client.wait_for_event(events.NewMessage(from_users=event.sender_id, func=check_answer), timeout=20)
            if answer_msg.text.lower() == q["a"]:
                await event.reply("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
            else:
                await event.reply(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–≤–µ—Ç –±—ã–ª **{q['a']}**.")
        except asyncio.TimeoutError:
            await event.reply(f"–í—Ä–µ–º—è –≤—ã—à–ª–æ! –û—Ç–≤–µ—Ç –±—ã–ª **{q['a']}**.")

    @client.on(events.NewMessage(pattern=r"-–∏–≥—Ä–∞ —Å–ª–æ—Ç—ã"))
    async def slots(event):
        symbols = ["üçé", "üçã", "üçí", "üíé", "‚≠ê"]
        result = [random.choice(symbols) for _ in range(3)]
        display = " | ".join(result)
        if len(set(result)) == 1:
            await event.reply(f"üé∞ {display} üé∞\n–î–∂–µ–∫–ø–æ—Ç! –ë–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à!")
        elif len(set(result)) == 2:
            await event.reply(f"üé∞ {display} üé∞\n–ù–µ–ø–ª–æ—Ö–æ! –ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–∑!")
        else:
            await event.reply(f"üé∞ {display} üé∞\n–£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")

    @client.on(events.NewMessage(pattern=r"-–∏–≥—Ä–∞ —à–∞—Ä (.+)"))
    async def eight_ball(event):
        responses = ["–î–∞", "–ù–µ—Ç", "–ú–æ–∂–µ—Ç –±—ã—Ç—å", "–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ", "–¢–æ—á–Ω–æ –¥–∞", "–°–æ–º–Ω–µ–≤–∞—é—Å—å"]
        question = event.pattern_match.group(1)
        await event.reply(f"üé± {question}\n–û—Ç–≤–µ—Ç: **{random.choice(responses)}**")

    @client.on(events.NewMessage(pattern=r"-–∏–≥—Ä–∞ –∫—Ä–µ—Å—Ç–∏–∫–∏"))
    async def tic_tac_toe(event):
        board = [" " for _ in range(9)]
        player = "X"
        bot = "O"

        def display_board():
            return f"{board[0]} | {board[1]} | {board[2]}\n---------\n{board[3]} | {board[4]} | {board[5]}\n---------\n{board[6]} | {board[7]} | {board[8]}"

        def check_win(p):
            win_conditions = [(0,1,2), (3,4,5), (6,7,8), (0,3,6), (1,4,7), (2,5,8), (0,4,8), (2,4,6)]
            return any(board[a] == board[b] == board[c] == p for a, b, c in win_conditions)

        await event.reply(f"–ò–≥—Ä–∞–µ–º –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏! –¢—ã **X**, —è **O**. –í—ã–±–µ—Ä–∏ –ø–æ–∑–∏—Ü–∏—é (1-9):\n{display_board()}")

        for _ in range(5):
            def check_move(m):
                return m.sender_id == event.sender_id and m.text.isdigit() and 1 <= int(m.text) <= 9 and board[int(m.text)-1] == " "
            try:
                move_msg = await client.wait_for_event(events.NewMessage(from_users=event.sender_id, func=check_move), timeout=20)
                pos = int(move_msg.text) - 1
                board[pos] = player
                if check_win(player):
                    await event.reply(f"{display_board()}\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª! üéâ")
                    return
                if " " not in board:
                    await event.reply(f"{display_board()}\n–ù–∏—á—å—è!")
                    return
                available = [i for i, x in enumerate(board) if x == " "]
                bot_move = random.choice(available)
                board[bot_move] = bot
                if check_win(bot):
                    await event.reply(f"{display_board()}\n–Ø –≤—ã–∏–≥—Ä–∞–ª!")
                    return
                await event.reply(f"{display_board()}\n–¢–≤–æ–π —Ö–æ–¥ (1-9):")
            except asyncio.TimeoutError:
                await event.reply("–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
                return
        await event.reply(f"{display_board()}\n–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!")

    @client.on(events.NewMessage(pattern=r"-–∏–≥—Ä–∞ –≤–∏—Å–µ–ª–∏—Ü–∞"))
    async def hangman(event):
        words = ["–ø–∏—Ç–æ–Ω", "—Ç–µ–ª–µ–≥—Ä–∞–º", "–∫–æ–¥–∏–Ω–≥", "–±–æ—Ç", "–∏–≥—Ä–∞"]
        word = random.choice(words)
        guessed = ["_"] * len(word)
        wrong = []
        tries = 6

        def display_hangman():
            return f"–°–ª–æ–≤–æ: {' '.join(guessed)}\n–û—à–∏–±–∫–∏: {', '.join(wrong)}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {tries}"

        await event.reply(f"–ò–≥—Ä–∞–µ–º –≤ –≤–∏—Å–µ–ª–∏—Ü—É! –£–≥–∞–¥—ã–≤–∞–π –ø–æ –æ–¥–Ω–æ–π –±—É–∫–≤–µ.\n{display_hangman()}")

        while tries > 0 and "_" in guessed:
            def check_letter(m):
                return m.sender_id == event.sender_id and len(m.text) == 1 and m.text.isalpha()
            try:
                letter_msg = await client.wait_for_event(events.NewMessage(from_users=event.sender_id, func=check_letter), timeout=20)
                letter = letter_msg.text.lower()
                if letter in wrong or letter in guessed:
                    await event.reply("–≠—Ç–∞ –±—É–∫–≤–∞ —É–∂–µ –±—ã–ª–∞!\n" + display_hangman())
                    continue
                if letter in word:
                    for i, c in enumerate(word):
                        if c == letter:
                            guessed[i] = letter
                    if "_" not in guessed:
                        await event.reply(f"–°–ª–æ–≤–æ: {' '.join(guessed)}\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª! üéâ")
                        return
                else:
                    wrong.append(letter)
                    tries -= 1
                    if tries == 0:
                        await event.reply(f"{display_hangman()}\n–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –°–ª–æ–≤–æ –±—ã–ª–æ **{word}**.")
                        return
                await event.reply(display_hangman())
            except asyncio.TimeoutError:
                await event.reply(f"–í—Ä–µ–º—è –≤—ã—à–ª–æ! –°–ª–æ–≤–æ –±—ã–ª–æ **{word}**.")
                return

    @client.on(events.NewMessage(pattern=r"-–∏–≥—Ä–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"))
    async def math_challenge(event):
        a, b = random.randint(1, 50), random.randint(1, 50)
        op = random.choice(["+", "-", "*"])
        if op == "+":
            answer = a + b
        elif op == "-":
            answer = a - b
        else:
            answer = a * b
        await event.reply(f"–†–µ—à–∏: {a} {op} {b} = ?")

        def check_answer(m):
            return m.sender_id == event.sender_id and (m.text.isdigit() or (m.text.startswith("-") and m.text[1:].isdigit()))

        try:
            answer_msg = await client.wait_for_event(events.NewMessage(from_users=event.sender_id, func=check_answer), timeout=20)
            if int(answer_msg.text) == answer:
                await event.reply("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
            else:
                await event.reply(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–≤–µ—Ç –±—ã–ª **{answer}**.")
        except asyncio.TimeoutError:
            await event.reply(f"–í—Ä–µ–º—è –≤—ã—à–ª–æ! –û—Ç–≤–µ—Ç –±—ã–ª **{answer}**.")

    @client.on(events.NewMessage(pattern=r"-–∏–≥—Ä–∞ —ç–º–æ–¥–∑–∏"))
    async def emoji_guess(event):
        emojis = {"üçé": "—è–±–ª–æ–∫–æ", "üêò": "—Å–ª–æ–Ω", "üåû": "—Å–æ–ª–Ω—Ü–µ"}
        emoji, answer = random.choice(list(emojis.items()))
        await event.reply(f"–£–≥–∞–¥–∞–π —ç—Ç–æ—Ç —ç–º–æ–¥–∑–∏: {emoji}")

        def check_answer(m):
            return m.sender_id == event.sender_id

        try:
            answer_msg = await client.wait_for_event(events.NewMessage(from_users=event.sender_id, func=check_answer), timeout=15)
            if answer_msg.text.lower() == answer:
                await event.reply("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
            else:
                await event.reply(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ –±—ã–ª–æ **{answer}**.")
        except asyncio.TimeoutError:
            await event.reply(f"–í—Ä–µ–º—è –≤—ã—à–ª–æ! –≠—Ç–æ –±—ã–ª–æ **{answer}**.")

    @client.on(events.NewMessage(pattern=r"-–∏–≥—Ä–∞ –ø—Ä–∞–≤–¥–∞"))
    async def true_false(event):
        statements = [
            {"q": "–ó–µ–º–ª—è –ø–ª–æ—Å–∫–∞—è.", "a": "–ª–æ–∂—å"},
            {"q": "1+1=11", "a": "–ª–æ–∂—å"},
            {"q": "–ü–∏—Ç–æ–Ω ‚Äî —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.", "a": "–ø—Ä–∞–≤–¥–∞"}
        ]
        stmt = random.choice(statements)
        await event.reply(f"–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å: {stmt['q']}")

        def check_answer(m):
            return m.sender_id == event.sender_id and m.text.lower() in ["–ø—Ä–∞–≤–¥–∞", "–ª–æ–∂—å"]

        try:
            answer_msg = await client.wait_for_event(events.NewMessage(from_users=event.sender_id, func=check_answer), timeout=15)
            if answer_msg.text.lower() == stmt["a"]:
                await event.reply("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
            else:
                await event.reply(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ –±—ã–ª–æ **{stmt['a']}**.")
        except asyncio.TimeoutError:
            await event.reply(f"–í—Ä–µ–º—è –≤—ã—à–ª–æ! –≠—Ç–æ –±—ã–ª–æ **{stmt['a']}**.")

    @client.on(events.NewMessage(pattern=r"-–∏–≥—Ä–∞ –∞–Ω–∞–≥—Ä–∞–º–º–∞"))
    async def anagram(event):
        words = ["—Å–ª—É—à–∞—Ç—å", "—Ç–∏—à–∏–Ω–∞", "–º–∞—à–∏–Ω–∞", "–ø—Ä–∏–≤–µ—Ç"]
        word = random.choice(words)
        anagram = "".join(random.sample(word, len(word)))
        await event.reply(f"–†–∞–∑–≥–∞–¥–∞–π —Å–ª–æ–≤–æ: **{anagram}**")

        def check_answer(m):
            return m.sender_id == event.sender_id

        try:
            answer_msg = await client.wait_for_event(events.NewMessage(from_users=event.sender_id, func=check_answer), timeout=20)
            if answer_msg.text.lower() == word:
                await event.reply("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
            else:
                await event.reply(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–æ–≤–æ –±—ã–ª–æ **{word}**.")
        except asyncio.TimeoutError:
            await event.reply(f"–í—Ä–µ–º—è –≤—ã—à–ª–æ! –°–ª–æ–≤–æ –±—ã–ª–æ **{word}**.")

    @client.on(events.NewMessage(pattern=r"-–∏–≥—Ä–∞ —Ä—É–ª–µ—Ç–∫–∞"))
    async def russian_roulette(event):
        chamber = random.randint(1, 6)
        if chamber == 1:
            await event.reply("üí• –ë–ê–•! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!")
        else:
            await event.reply("–ö–ª–∏–∫... –¢—ã –≤–µ–∑—É—á–∏–π! üòÖ")

    @client.on(events.NewMessage(pattern=r"-–∏–≥—Ä–∞ –∑–∞–≥–∞–¥–∫–∞"))
    async def riddle(event):
        riddles = [
            {"q": "–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–ª–∞–≤–∏—à–∏, –Ω–æ —è –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—é –∑–∞–º–∫–∏. –ß—Ç–æ —è?", "a": "–ø–∏–∞–Ω–∏–Ω–æ"},
            {"q": "–Ø –≥–æ–≤–æ—Ä—é –±–µ–∑ —Ä—Ç–∞ –∏ —Å–ª—ã—à—É –±–µ–∑ —É—à–µ–π. –ß—Ç–æ —è?", "a": "—ç—Ö–æ"},
            {"q": "–ß—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–æ–∫—Ä–µ–µ, —á–µ–º –±–æ–ª—å—à–µ —Å—É—à–∏—Ç?", "a": "–ø–æ–ª–æ—Ç–µ–Ω—Ü–µ"}
        ]
        riddle = random.choice(riddles)
        await event.reply(f"–ó–∞–≥–∞–¥–∫–∞: {riddle['q']}\n–¢–≤–æ–π –æ—Ç–≤–µ—Ç?")

        def check_answer(m):
            return m.sender_id == event.sender_id

        try:
            answer_msg = await client.wait_for_event(events.NewMessage(from_users=event.sender_id, func=check_answer), timeout=30)
            if answer_msg.text.lower() == riddle["a"]:
                await event.reply("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
            else:
                await event.reply(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–≤–µ—Ç –±—ã–ª **{riddle['a']}**.")
        except asyncio.TimeoutError:
            await event.reply(f"–í—Ä–µ–º—è –≤—ã—à–ª–æ! –û—Ç–≤–µ—Ç –±—ã–ª **{riddle['a']}**.")

    @client.on(events.NewMessage(pattern=r"-–∏–≥—Ä–∞ –ø–æ–º–æ—â—å"))
    async def game_help(event):
        help_text = (
            "üéÆ **–ú–æ–¥—É–ª—å –∏–≥—Ä** üéÆ\n"
            "-–∏–≥—Ä–∞ —É–≥–∞–¥–∞–π—á–∏—Å–ª–æ ‚Äî –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100\n"
            "-–∏–≥—Ä–∞ –∫–Ω–± <–∫–∞–º–µ–Ω—å|–Ω–æ–∂–Ω–∏—Ü—ã|–±—É–º–∞–≥–∞> ‚Äî –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞\n"
            "-–∏–≥—Ä–∞ –º–æ–Ω–µ—Ç–∫–∞ <–æ—Ä–µ–ª|—Ä–µ—à–∫–∞> ‚Äî –ü–æ–¥–±—Ä–æ—Å—å –º–æ–Ω–µ—Ç–∫—É\n"
            "-–∏–≥—Ä–∞ –∫—É–±–∏–∫ ‚Äî –ë—Ä–æ—Å—å –∫—É–±–∏–∫\n"
            "-–∏–≥—Ä–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ ‚Äî –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã\n"
            "-–∏–≥—Ä–∞ —Å–ª–æ—Ç—ã ‚Äî –ö—Ä—É—Ç–∏ –∏–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç\n"
            "-–∏–≥—Ä–∞ —à–∞—Ä <–≤–æ–ø—Ä–æ—Å> ‚Äî –°–ø—Ä–æ—Å–∏ –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä\n"
            "-–∏–≥—Ä–∞ –∫—Ä–µ—Å—Ç–∏–∫–∏ ‚Äî –ò–≥—Ä–∞–π –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞\n"
            "-–∏–≥—Ä–∞ –≤–∏—Å–µ–ª–∏—Ü–∞ ‚Äî –ò–≥—Ä–∞–π –≤ –≤–∏—Å–µ–ª–∏—Ü—É\n"
            "-–∏–≥—Ä–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ‚Äî –†–µ—à–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É\n"
            "-–∏–≥—Ä–∞ —ç–º–æ–¥–∑–∏ ‚Äî –£–≥–∞–¥–∞–π —ç–º–æ–¥–∑–∏\n"
            "-–∏–≥—Ä–∞ –ø—Ä–∞–≤–¥–∞ ‚Äî –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å\n"
            "-–∏–≥—Ä–∞ –∞–Ω–∞–≥—Ä–∞–º–º–∞ ‚Äî –†–∞–∑–≥–∞–¥–∞–π –∞–Ω–∞–≥—Ä–∞–º–º—É\n"
            "-–∏–≥—Ä–∞ —Ä—É–ª–µ—Ç–∫–∞ ‚Äî –ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É –≤ —Ä—É—Å—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–µ\n"
            "-–∏–≥—Ä–∞ –∑–∞–≥–∞–¥–∫–∞ ‚Äî –†–µ—à–∏ –∑–∞–≥–∞–¥–∫—É\n"
            "-–∏–≥—Ä–∞ –ø–æ–º–æ—â—å ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é"
        )
        await event.reply(help_text)
